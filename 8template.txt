
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
diabetes = pd.read_csv('diabetes.csv')
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(diabetes.drop('Class',axis=1), 
                                                    diabetes['Class'], test_size=0.30, 
                                                    random_state=101)
from sklearn.svm import SVC
svc_classifier=SVC(kernel='linear')
svc_classifier.fit(X_train,y_train)
predictions=svc_classifier.predict(X_test)
from sklearn.metrics import classification_report, confusion_matrix

print(confusion_matrix(y_test,predictions))

from sklearn.metrics import accuracy_score

accuracy_score(y_test, predictions)
-----------------------------------------------------------------------------------------------
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

# Load the diabetes dataset
diabetes_data = pd.read_csv("diabetes.csv")

# Split the dataset into features and target variable
X = diabetes_data.drop("Outcome", axis=1)
y = diabetes_data["Outcome"]

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Naive Bayes model
nb_model = GaussianNB()

# Train the model on the training data
nb_model.fit(X_train, y_train)

# Predict the target values for the test data
y_pred = nb_model.predict(X_test)

# Calculate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)

# Print the accuracy as a percentage
print("Naive Bayes Accuracy: {:.2f}%".format(accuracy * 100))

